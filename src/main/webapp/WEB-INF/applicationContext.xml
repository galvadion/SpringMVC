<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo" xmlns:c="http://www.springframework.org/schema/c"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd 
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
	http://www.springframework.org/schema/data/mongo
    http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
	http://www.springframework.org/schema/task
    http://www.springframework.org/schema/task/spring-task-4.0.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-4.1.xsd">
	<!-- Enable Autowire -->
	<context:annotation-config />
	<context:component-scan base-package="com" />
	<bean name="Properties"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath*:config.properties</value>
		</property>
	</bean>
	<mvc:annotation-driven>
		<mvc:message-converters>
			<!-- Use the HibernateAware mapper instead of the default -->
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper">
					<bean class="com.configuration.HibernateAwareObjectMapper" />
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<mvc:resources mapping="/images/**" location="file:${images}" />
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/springapp" />
		<property name="username" value="root" />
		<property name="password" value="admin" />
	</bean><!-- Session Factory Declaration -->
	<bean id="jndiDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:/Proyecto-Desa" />
	</bean>
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<!-- SMTP settings -->
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="username" value="info.rentuy" />
		<property name="password" value="beccocueva2016" />

		<property name="javaMailProperties">
			<!-- additional properties specific to JavaMail -->
			<props>
				<prop key="mail.transport.protocol">smtp</prop>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
			</props>
		</property>
	</bean>
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="jndiDataSource" />
		<property name="packagesToScan" value="com.entities" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.enable_lazy_load_no_trans">true</prop>
				<prop key="hibernate.default_schema">public</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="format_sql">true</prop>
				<prop key="use_sql_comments">true</prop>
			</props>
		</property>
	</bean>
	<mvc:resources mapping="/static/**" location="/static/" />

	<mvc:default-servlet-handler />
	<tx:annotation-driven transaction-manager="transactionManager" />
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- Activate Spring Data MongoDB repository support -->
	<mongo:repositories base-package="com.repository" />

	<!-- MongoDB host -->
	<mongo:mongo host="${mongo.host.name}" port="${mongo.host.port}" />

	<!-- Template for performing MongoDB operations -->
	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate"
		c:mongo-ref="mongo" c:databaseName="${mongo.db.name}" />
		
	<!-- SPRING SECURITY -->
	<!-- Rest authentication entry point configuration -->
    <security:http 	create-session="stateless"
    				use-expressions="true" 
    				entry-point-ref="restAuthenticationEntryPoint"
    				authentication-manager-ref="authenticationManager">
<!--     	<sec:intercept-url pattern="/**" access="permitAll" /> -->
        <security:intercept-url pattern="/**" requires-channel="https" />
        <security:http-basic />
 		<security:csrf disabled="true"/>
        <security:logout />
        <security:port-mappings>
			<security:port-mapping http="8080" https="8443"/>
		</security:port-mappings>
    </security:http>
    
    <!-- Connect the custom authentication success handler -->
    <bean id="mySuccessHandler" class="security.RestAuthenticationSuccessHandler" />
    <!-- Using default failure handler -->
    <bean id="myFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler" />
    <bean id="restAuthenticationEntryPoint" class="security.RestAuthenticationEntryPoint" />
    
    <bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">
		<security:filter-chain-map request-matcher="ant">
	    	<security:filter-chain filters="persistencefilter,authenticationfilter" pattern="/nico/login"/>
 		</security:filter-chain-map>
	</bean>
	
	<bean id="persistencefilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter" />
	
	<bean id="authenticationfilter" class="security.AuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationSuccessHandler" ref="mySuccessHandler" />
		<property name="passwordParameter" value="password" />
		<property name="usernameParameter" value="email" />
		<property name="postOnly" value="false" />
	</bean>
	
<!-- 	<bean id="basicAuthenticationFilter"   class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter"> -->
<!-- 	    <property name="authenticationManager" ref="authenticationManager"/>  -->
<!-- 	    <property name="authenticationEntryPoint" ref="restAuthenticationEntryPoint"/>  -->
<!-- 	</bean> -->
	
<!-- 	<bean id="httpRequestAccessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased"> -->
<!-- 	    <property name="allowIfAllAbstainDecisions" value="false"/> -->
<!-- 	    <property name="decisionVoters"> -->
<!-- 	        <list> -->
<!-- 	            <ref bean="roleVoter"/> -->
<!-- 	        </list> -->
<!-- 	    </property> -->
<!-- 	</bean> -->
	
<!-- 	<bean id="restfilter" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor" > -->
<!-- 		<property name="authenticationManager" ref="authenticationManager" /> -->
<!-- 		<property name="accessDecisionManager" ref="httpRequestAccessDecisionManager" /> -->
<!-- 		<property name="securityMetadataSource"> -->
<!-- 			<security:filter-security-metadata-source> -->
<!-- 				<security:intercept-url pattern="/api/**" access="ROLE_USER"/> -->
<!-- 			</security:filter-security-metadata-source> -->
<!-- 		</property> -->
<!-- 	</bean> -->
	
	<bean id="userServicesImpl" class="com.servicesImpl.UserServicesImpl"></bean>

    <!-- Authentication manager -->
    <security:authentication-manager alias="authenticationManager">
    	<security:authentication-provider user-service-ref="userServicesImpl">
    	</security:authentication-provider>
<!--         <security:authentication-provider> -->
<!--             <security:user-service> -->
<!--                 <security:user name="temporary" password="temporary" authorities="ROLE_ADMIN" /> -->
<!--                 <security:user name="user" password="userPass" authorities="ROLE_USER" /> -->
<!--             </security:user-service> -->
<!--         </security:authentication-provider> -->
    </security:authentication-manager>
 
    <!-- Enable the annotations for defining the secure role -->
    <security:global-method-security secured-annotations="enabled" />
    
    
</beans>